generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String         @id @unique @default(cuid())
  name          String?
  email         String?        @unique
  username      String?        @unique
  avatarUrl     String?
  sessions      Session[]
  passwords     Password[]
  oauthAccounts OauthAccount[]
  address       Address[]

  verificationTokens VerificationToken[]
  integrations       Integration[]
  quickLinks         QuickLink[]
}

model Address {
  id         String  @id @unique @default(cuid())
  line1      String
  line2      String?
  line3      String?
  postalCode String
  user       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
}

model Session {
  id        String   @id @unique @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model OauthAccount {
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([providerId, providerUserId])
}

model Password {
  id             String @id @unique @default(cuid())
  hashedPassword String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model VerificationToken {
  id      String @id @unique @default(cuid())
  type    Token
  expires BigInt
  token   String
  userId  String
  user    User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum Token {
  EMAIL
  PASSWORD
}

model Integration {
  id        String    @id @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  payfast   Payfast[]
}

model Payfast {
  id            String      @id @unique @default(cuid())
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  merchantId    String
  merchantKey   String
  passphrase    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  active        Boolean     @default(true)
}

model QuickLink {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  amount      Float
  serial      String
  description String?
  status      Status   @default(PENDING)
}

enum Status {
  PENDING
  PAID
  EXPIRED
  OVERDUE
}
