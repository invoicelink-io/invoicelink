generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String         @id @unique @default(cuid())
  name          String?
  email         String?        @unique
  username      String?        @unique
  avatarUrl     String?
  vatNumber     String?
  currency      Currency       @default(USD)
  sessions      Session[]
  passwords     Password[]
  oauthAccounts OauthAccount[]
  address       Address[]

  verificationTokens VerificationToken[]
  integrations       Integration[]
  quickLinks         QuickLink[]
  lastUsedSerial     LastUsedSerial[]
  invoiceStyles      InvoiceStyles[]
  invoice            Invoice[]
  client             Client[]
  bankAccount        BankAccount[]
}

model LastUsedSerial {
  id     String     @id @unique @default(cuid())
  serial String
  type   SerialType
  user   User       @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, type])
}

enum Currency {
  EUR
  USD
  ZAR
}

enum SerialType {
  QUICK_LINK
  INVOICE
}

model Address {
  id         String      @id @unique @default(cuid())
  line1      String
  line2      String?
  line3      String?
  postalCode String
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  client     Client[]
  invoice    Invoice[]
  quickLink  QuickLink[]
}

model BankAccount {
  id            String   @id @unique @default(cuid())
  userId        String
  user          User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accountHolder String
  accountNo     String
  accountType   String
  bankName      String
  branchCode    String
}

model Session {
  id        String   @id @unique @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model OauthAccount {
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([providerId, providerUserId])
}

model Password {
  id             String @id @unique @default(cuid())
  hashedPassword String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model VerificationToken {
  id      String @id @unique @default(cuid())
  type    Token
  expires BigInt
  token   String
  userId  String
  user    User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum Token {
  EMAIL
  PASSWORD
}

model Integration {
  id        String    @id @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  payfast   Payfast[]
  yoco      Yoco[]
}

model Payfast {
  id            String      @id @unique @default(cuid())
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  merchantId    String
  merchantKey   String
  passphrase    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  active        Boolean     @default(true)
}

model Yoco {
  id            String      @id @unique @default(cuid())
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  publicKey     String
  secretKey     String
  webhookSecret String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  active        Boolean     @default(true)
}

model QuickLink {
  id               String   @id @unique @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  user             User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  sendersAddress   Address  @relation(fields: [sendersAddressId], references: [id])
  sendersAddressId String
  subtotal         Float
  tax              Float
  total            Float
  serial           String
  description      String?
  status           Status   @default(PENDING)
  yocoCheckoutId   String?  @unique
}

model Invoice {
  id               String         @id @unique @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  issueDate        DateTime
  dueDate          DateTime?
  description      String?
  userId           String
  user             User           @relation(references: [id], fields: [userId], onDelete: Cascade)
  subtotal         Float
  taxPercentage    Int            @default(15)
  tax              Float
  total            Float
  serial           String
  lineItems        LineItem[]
  status           Status         @default(PENDING)
  sendersAddress   Address        @relation(fields: [sendersAddressId], references: [id])
  sendersAddressId String
  client           Client         @relation(fields: [clientId], references: [id])
  clientId         String
  yocoCheckoutId   String?        @unique
  invoiceStyleId   String?
  invoiceStyle     InvoiceStyles? @relation(fields: [invoiceStyleId], references: [id], onDelete: SetNull)
}

model LineItem {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String
  invoice     Invoice  @relation(references: [id], fields: [invoiceId], onDelete: Cascade)
  description String
  quantity    Int
  amount      Float
}

model Client {
  id        String    @id @unique @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  name      String
  vatNumber String?
  email     String?
  phone     String?
  address   Address   @relation(fields: [addressId], references: [id])
  addressId String
  Invoice   Invoice[]
}

enum Status {
  PENDING
  PAID
  EXPIRED
  OVERDUE
}

model InvoiceStyles {
  id                        String    @id @unique @default(cuid())
  name                      String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  userId                    String
  user                      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  baseFontSize              String
  baseSpacing               String
  baseDivider               String
  baseDividerColor          String
  issueDateAlign            String
  senderAddressAlign        String
  recipientAddressAlign     String
  bankDetailsAlign          String    @default("text-right")
  invoiceType               String
  invoiceTypeFontSize       String
  invoiceTypeColor          String
  invoiceTypeCasing         String
  columnHeadingSize         String
  columnHeadingColor        String
  columnHeadingCasing       String
  columnHeadingDivider      String
  columnHeadingDividerColor String
  lineItemDivider           String
  lineItemDividerColor      String
  logoAlt                   String
  logoSrc                   String?
  previewSrc                String?
  Invoice                   Invoice[]
}
